#! /usr/bin/env python

PACKAGE='controller_adaptiveclbf'
import roslib
roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
#       Name       Type      Level Description                Default Min   Max
gen.add("enable",  bool_t,   0,    "Enable node operation.",  True)

vehicle = gen.add_group("Vehicle")
vehicle.add("vehicle_length", double_t, 0, "Vehicle Length (m)", 0.4, 0.01,5.0)
vehicle.add("steering_limit", double_t, 0, "Steering Limit (?)", 0.5, 0.0,2.0)
vehicle.add("scale_acceleration", double_t, 0, "Desired velocity gain times output acceleration.", 0.0, 0.0, 100.0)
vehicle.add("acceleration_deadband", double_t, 0, "Current control deadband.", 6.0, 0.0, 100.0)
vehicle.add("acceleration_gain", double_t, 0, "Desired acceleration gain to current.", 10.0, 0.0, 100.0)
vehicle.add("max_accel", double_t, 0, "Max Acceleration (N)", 5.0, -50.0,50.0)
vehicle.add("min_accel", double_t, 0, "Min Acceleration (N)", -5.0, -50.0,50.0)
vehicle.add("rate", double_t, 0, "Controller Rate (Hz)", 50.0, 0.1,100.0)

learning = gen.add_group("Learning")
learning.add("learning_verbose", bool_t, 0, "Enable Learning verbose mode", False)
learning.add("use_model", bool_t, 0, "Use learned model in adaptive controller", False)
learning.add("add_data", bool_t, 0, "Whether or not to record data for training", True)
learning.add("check_model", bool_t, 0, "Compute training loss online", True)
learning.add("model_train", bool_t, 0, "Train model in adaptive controller", True)
learning.add("measurement_noise", double_t, 0, "Prior on noise for model, how much to trust model", 40.0, 0.0,100.0)
learning.add("N_data", int_t, 0, "Number of datapoints to save", 50000, 1, 100000)
learning.add("N_updates", int_t, 0, "Number of training updates", 50, 1, 50000)
learning.add("meta_batch_size", int_t, 0, "Meta-batch size", 50, 1, 1000)
learning.add("data_horizon", int_t, 0, "Number of context data points", 20, 1, 1000)
learning.add("test_horizon", int_t, 0, "Number of test data points", 30, 1, 1000)
learning.add("min_datapoints", int_t, 0, "Minimum number of data points before training", 500, 1, 100000)
learning.add("save_data_interval", int_t, 0, "Interval at which to save data", 10000, 1, 10000000)
learning.add("learning_rate", double_t, 0, "Learning rate", 0.001, 0, 10)

control = gen.add_group("Control")
control.add("reverse_velocity_goal", bool_t, 0, "Reverse desired velocity if vehicle stops.", False)
control.add("use_qp", bool_t, 0, "Use qp to optimize for controls", True)
control.add("desired_vel", double_t, 0, "Desired velocity at goal", 0.0, -100.0, 100.0)
control.add("verbose", bool_t, 0, "Enable Controller Verbose mode", False)
control.add("kp_z", double_t, 0, "Position Gain", 1.0, 0.0,100.0)
control.add("kd_z", double_t, 0, "Velocity Gain", 1.0, 0.0,100.0)
control.add("max_error", double_t, 0, "clip pd error", 10.0,0.0,1000.0)
control.add("kp_goal", double_t, 0, "Set desired velocity proportional to distance to goal (<0 to disable)", -1.0, -1.0,10.0)
control.add("clf_epsilon", double_t, 0, "CLF Epsilon Convergence Factor", 100.0, 0.001,10000.0)
control.add("qp_u_cost", double_t, 0, "QP Controls Cost", 100.0, 0.0,1.0e10)
control.add("qp_u_prev_cost", double_t, 0, "QP Controls Smoothing Cost", 0.0, 0.0,1.0e10)
control.add("qp_p1_cost", double_t, 0, "QP Lyapunov Slack Cost", 1.0, 0.0,1.0e12)
control.add("qp_p2_cost", double_t, 0, "QP Barrier Slack Cost", 1.0e12, 0.0,1.0e12)
control.add("qp_ksig", double_t, 0, "QP k_sigma Safety factor", 1.0, 0.0, 1.0e10)
control.add("qp_max_var", double_t, 0, "QP Max Variance for sigDelta", 1.0, 0.0, 100.0)
control.add("qp_verbose", bool_t, 0, "Enable QP Verbose mode", False)

barriers = gen.add_group("Barriers")
barriers.add("use_barrier_vel", bool_t, 0, "CBF for Velocity Enable/Disable", True)
barriers.add("max_velocity", double_t, 0, "CBF Barrier for Max Velocity", 3.0, -100.0,100.0)
barriers.add("min_velocity", double_t, 0, "CBF Barrier for Min Velocity", -3.0, -100.0,100.0)
barriers.add("barrier_vel_gamma", double_t, 0, "CBF Barrier gamma for Velocity", 100.0, 0.0,10000.0)
barriers.add("use_barrier_pointcloud", bool_t, 0, "CBF for Points on pointcloud Enable/Disable", True)
barriers.add("barrier_radius", double_t, 0, "CBF Barrier for pointcloud, min radius", 0.4, -10.0,100.0)
barriers.add("barrier_radius_velocity_scale", double_t, 0, "CBF Barrier for pointcloud, scale radius by velocity", 0.2, -10.0,100.0)
barriers.add("barrier_pc_gamma_p", double_t, 0, "CBF Barrier for pointcloud, gamma_p", 1.0, 0.0,10000.0)
barriers.add("barrier_pc_gamma", double_t, 0, "CBF Barrier for pointcloud, gamma", 10.0, 0.0,10000.0)
barriers.add("barrier_max_distance", double_t, 0, "CBF Barrier max distance", 3.0, 0.0,100.0)
barriers.add("barrier_resolution", double_t, 0, "CBF Barrier resolution", 0.1, 0.0,10.0)


exit(gen.generate(PACKAGE, "controller_adaptiveclbf", "adaptiveClbf"))
